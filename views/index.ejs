<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <script
  src="https://code.jquery.com/jquery-3.5.0.min.js"
  integrity="sha256-xNzN2a4ltkB44Mc/Jz3pT4iU1cmeR0FkXs4pru/JxaQ="
  crossorigin="anonymous"></script>
    <script type='text/javascript' src='/javascripts/initMap.js'></script>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    <h1><%= title %></h1>
    <p>Welcome to <%= title %></p>
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>
    <form action= '/' method='get'>
      <input  type= 'submit' id="find" value='Reset'/>
    </form>
    <script>
        $(document).ready(function ()
      {
          $('#find').click( ()=> {
            console.log("Click!")
          })
      })
    </script>
    <script>
      // Initialize and add the map
      function initMap() {
        // The location of Uluru
        let initialPosition = { lat: 0, lng: 0 };

        // The map, centered at Uluru
        const map = new google.maps.Map(document.getElementById("map"), {
          zoom: 15,
        });

        if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
         initialPosition = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
         console.log(initialPosition);
         map.setCenter(initialPosition);
     });
      }

        // Create the search box and link it to the UI element.
        const input = document.getElementById('pac-input');
        const searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            const marker = new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            })

            const infoWindow = new google.maps.InfoWindow({
            content: `<h1>${marker.title}</h1>`
          });
        
            marker.addListener('click', ()=>{
            infoWindow.open(map,marker);
            })
            // Create a marker for each place.
            markers.push(marker);

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });

        //Add markers to map when clicked
        let count = 0;

        function addMarker(coords) {
          count ++;
          const marker = new google.maps.Marker({ position: coords, map: map });
          const infoWindow = new google.maps.InfoWindow({
            content: `<h1>${count}</h1>`
          });
        
          marker.addListener('click', ()=>{
            infoWindow.open(map,marker);
          })
        }

        //Listen for click on map
        google.maps.event.addListener(map, 'click', 
        function(event){
          addMarker(event.latLng);
        })
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=<%= key %>&libraries=places&callback=initMap"
      async defer ></script>
  </body>
</html>
